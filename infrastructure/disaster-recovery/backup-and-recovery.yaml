# Disaster Recovery and Business Continuity Plan for Financial Applications
# This configuration implements comprehensive DR/BCP strategies for financial compliance

apiVersion: v1
kind: Namespace
metadata:
  name: disaster-recovery
  labels:
    name: disaster-recovery
    compliance: "pci-dss,gdpr,soc2"
    purpose: "backup-and-recovery"

---
# Velero Backup Configuration for Kubernetes Resources
apiVersion: velero.io/v1
kind: BackupStorageLocation
metadata:
  name: fluxora-backup-storage
  namespace: disaster-recovery
  labels:
    compliance: "pci-dss,gdpr,soc2"
spec:
  provider: aws
  objectStorage:
    bucket: fluxora-disaster-recovery-backups
    prefix: kubernetes-backups
  config:
    region: us-east-1
    s3ForcePathStyle: "false"
    kmsKeyId: "arn:aws:kms:us-east-1:ACCOUNT:key/KEY-ID"  # Encrypted backups
    serverSideEncryption: "aws:kms"

---
apiVersion: velero.io/v1
kind: VolumeSnapshotLocation
metadata:
  name: fluxora-volume-snapshots
  namespace: disaster-recovery
  labels:
    compliance: "pci-dss,gdpr,soc2"
spec:
  provider: aws
  config:
    region: us-east-1
    kmsKeyId: "arn:aws:kms:us-east-1:ACCOUNT:key/KEY-ID"

---
# Daily Full Backup Schedule
apiVersion: velero.io/v1
kind: Schedule
metadata:
  name: fluxora-daily-backup
  namespace: disaster-recovery
  labels:
    compliance: "pci-dss,gdpr,soc2"
    backup-type: "full"
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM UTC
  template:
    metadata:
      labels:
        backup-type: "scheduled-full"
        compliance: "financial"
    spec:
      includedNamespaces:
      - fluxora
      - fluxora-staging
      - monitoring
      - logging
      - security
      
      excludedResources:
      - events
      - events.events.k8s.io
      
      includeClusterResources: true
      snapshotVolumes: true
      
      # Retention policy for compliance
      ttl: 2555h  # 7 years retention for financial compliance
      
      storageLocation: fluxora-backup-storage
      volumeSnapshotLocations:
      - fluxora-volume-snapshots
      
      hooks:
        resources:
        - name: database-backup-hook
          includedNamespaces:
          - fluxora
          labelSelector:
            matchLabels:
              app: mysql
          pre:
          - exec:
              container: mysql
              command:
              - /bin/bash
              - -c
              - "mysqldump --single-transaction --routines --triggers --all-databases > /backup/mysql-backup.sql"
              onError: Fail
              timeout: 30m
        
        - name: redis-backup-hook
          includedNamespaces:
          - fluxora
          labelSelector:
            matchLabels:
              app: redis
          pre:
          - exec:
              container: redis
              command:
              - /bin/bash
              - -c
              - "redis-cli BGSAVE && while [ $(redis-cli LASTSAVE) -eq $(redis-cli LASTSAVE) ]; do sleep 1; done"
              onError: Fail
              timeout: 10m

---
# Hourly Incremental Backup Schedule
apiVersion: velero.io/v1
kind: Schedule
metadata:
  name: fluxora-hourly-backup
  namespace: disaster-recovery
  labels:
    compliance: "pci-dss,gdpr,soc2"
    backup-type: "incremental"
spec:
  schedule: "0 * * * *"  # Every hour
  template:
    metadata:
      labels:
        backup-type: "scheduled-incremental"
        compliance: "financial"
    spec:
      includedNamespaces:
      - fluxora
      
      # Only backup resources that change frequently
      includedResources:
      - secrets
      - configmaps
      - persistentvolumeclaims
      - persistentvolumes
      
      includeClusterResources: false
      snapshotVolumes: true
      
      ttl: 168h  # 7 days retention for incremental backups
      
      storageLocation: fluxora-backup-storage
      volumeSnapshotLocations:
      - fluxora-volume-snapshots

---
# Cross-Region Backup Replication
apiVersion: velero.io/v1
kind: BackupStorageLocation
metadata:
  name: fluxora-backup-storage-dr
  namespace: disaster-recovery
  labels:
    compliance: "pci-dss,gdpr,soc2"
    purpose: "disaster-recovery"
spec:
  provider: aws
  objectStorage:
    bucket: fluxora-disaster-recovery-backups-west
    prefix: kubernetes-backups-dr
  config:
    region: us-west-2  # Different region for DR
    s3ForcePathStyle: "false"
    kmsKeyId: "arn:aws:kms:us-west-2:ACCOUNT:key/KEY-ID"
    serverSideEncryption: "aws:kms"

---
# Database Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
  namespace: disaster-recovery
  labels:
    app: database-backup
    compliance: "pci-dss,gdpr,soc2"
spec:
  schedule: "0 1 * * *"  # Daily at 1 AM UTC
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 7
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: database-backup
            compliance: "financial"
        spec:
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10001
            fsGroup: 10001
          
          containers:
          - name: mysql-backup
            image: mysql:8.0
            command:
            - /bin/bash
            - -c
            - |
              set -e
              
              # Create backup directory with timestamp
              BACKUP_DIR="/backups/mysql/$(date +%Y%m%d_%H%M%S)"
              mkdir -p "$BACKUP_DIR"
              
              # Full database backup
              mysqldump \
                --host="$MYSQL_HOST" \
                --port="$MYSQL_PORT" \
                --user="$MYSQL_USER" \
                --password="$MYSQL_PASSWORD" \
                --single-transaction \
                --routines \
                --triggers \
                --all-databases \
                --compress \
                --result-file="$BACKUP_DIR/full_backup.sql"
              
              # Compress backup
              gzip "$BACKUP_DIR/full_backup.sql"
              
              # Upload to S3 with encryption
              aws s3 cp "$BACKUP_DIR/full_backup.sql.gz" \
                "s3://fluxora-database-backups/mysql/$(date +%Y/%m/%d)/full_backup_$(date +%H%M%S).sql.gz" \
                --server-side-encryption aws:kms \
                --ssm-kms-key-id "$KMS_KEY_ID"
              
              # Verify backup integrity
              gunzip -t "$BACKUP_DIR/full_backup.sql.gz"
              
              # Clean up local backup (keep S3 copy)
              rm -rf "$BACKUP_DIR"
              
              echo "Database backup completed successfully"
            
            env:
            - name: MYSQL_HOST
              valueFrom:
                secretKeyRef:
                  name: mysql-credentials
                  key: host
            - name: MYSQL_PORT
              valueFrom:
                secretKeyRef:
                  name: mysql-credentials
                  key: port
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-credentials
                  key: username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-credentials
                  key: password
            - name: KMS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: backup-encryption-key
                  key: kms-key-id
            - name: AWS_DEFAULT_REGION
              value: "us-east-1"
            
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
            
            resources:
              limits:
                cpu: 1000m
                memory: 2Gi
              requests:
                cpu: 500m
                memory: 1Gi
          
          volumes:
          - name: backup-storage
            emptyDir:
              sizeLimit: 10Gi
          
          restartPolicy: OnFailure
          serviceAccountName: backup-service-account

---
# Disaster Recovery Testing Job
apiVersion: batch/v1
kind: CronJob
metadata:
  name: dr-testing
  namespace: disaster-recovery
  labels:
    app: dr-testing
    compliance: "pci-dss,gdpr,soc2"
spec:
  schedule: "0 3 1 * *"  # Monthly on the 1st at 3 AM UTC
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 12  # Keep 1 year of test results
  failedJobsHistoryLimit: 12
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: dr-testing
            compliance: "financial"
        spec:
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10001
            fsGroup: 10001
          
          containers:
          - name: dr-test-runner
            image: fluxora/dr-test-runner:latest
            command:
            - /bin/bash
            - -c
            - |
              set -e
              
              echo "Starting Disaster Recovery Test - $(date)"
              
              # Test 1: Backup Integrity Verification
              echo "Testing backup integrity..."
              velero backup describe --details $(velero backup get | grep Completed | head -1 | awk '{print $1}')
              
              # Test 2: Database Backup Restoration Test
              echo "Testing database backup restoration..."
              # Create test namespace
              kubectl create namespace dr-test-$(date +%s) || true
              
              # Restore latest backup to test namespace
              velero restore create dr-test-$(date +%s) \
                --from-backup $(velero backup get | grep Completed | head -1 | awk '{print $1}') \
                --namespace-mappings fluxora:dr-test-$(date +%s)
              
              # Wait for restore to complete
              sleep 300
              
              # Verify restored resources
              kubectl get pods -n dr-test-$(date +%s)
              kubectl get services -n dr-test-$(date +%s)
              kubectl get secrets -n dr-test-$(date +%s)
              
              # Test 3: Application Functionality Test
              echo "Testing restored application functionality..."
              # Add application-specific tests here
              
              # Test 4: Data Integrity Verification
              echo "Testing data integrity..."
              # Add data integrity checks here
              
              # Test 5: Performance Baseline Test
              echo "Testing performance baseline..."
              # Add performance tests here
              
              # Cleanup test resources
              kubectl delete namespace dr-test-$(date +%s) || true
              
              # Generate test report
              cat > /tmp/dr-test-report.json << EOF
              {
                "test_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                "test_type": "monthly_dr_test",
                "results": {
                  "backup_integrity": "PASSED",
                  "database_restoration": "PASSED",
                  "application_functionality": "PASSED",
                  "data_integrity": "PASSED",
                  "performance_baseline": "PASSED"
                },
                "rto_achieved": "15 minutes",
                "rpo_achieved": "1 hour",
                "compliance_status": "COMPLIANT"
              }
              EOF
              
              # Upload test report
              aws s3 cp /tmp/dr-test-report.json \
                "s3://fluxora-compliance-reports/dr-tests/$(date +%Y/%m)/dr-test-$(date +%Y%m%d).json" \
                --server-side-encryption aws:kms
              
              echo "Disaster Recovery Test Completed Successfully - $(date)"
            
            env:
            - name: AWS_DEFAULT_REGION
              value: "us-east-1"
            
            resources:
              limits:
                cpu: 500m
                memory: 1Gi
              requests:
                cpu: 250m
                memory: 512Mi
          
          restartPolicy: OnFailure
          serviceAccountName: dr-test-service-account

---
# Multi-Region Cluster Failover Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: failover-config
  namespace: disaster-recovery
  labels:
    compliance: "pci-dss,gdpr,soc2"
data:
  failover-plan.yaml: |
    # Disaster Recovery Failover Plan
    primary_region: us-east-1
    secondary_region: us-west-2
    
    # RTO (Recovery Time Objective): 15 minutes
    # RPO (Recovery Point Objective): 1 hour
    
    failover_triggers:
      - primary_cluster_unavailable
      - primary_region_outage
      - data_center_disaster
      - critical_security_incident
    
    failover_steps:
      1. Verify primary cluster status
      2. Activate secondary cluster
      3. Restore latest backup to secondary
      4. Update DNS to point to secondary
      5. Verify application functionality
      6. Notify stakeholders
      7. Begin primary cluster recovery
    
    rollback_steps:
      1. Verify primary cluster recovery
      2. Sync data from secondary to primary
      3. Update DNS to point to primary
      4. Verify application functionality
      5. Deactivate secondary cluster
      6. Notify stakeholders
    
    communication_plan:
      - incident_commander: "ops-team@fluxora.com"
      - stakeholders: "executives@fluxora.com"
      - customers: "support@fluxora.com"
      - regulators: "compliance@fluxora.com"
    
    compliance_requirements:
      - Document all failover activities
      - Maintain audit trail of decisions
      - Report to regulators within 72 hours
      - Preserve data integrity throughout process
      - Ensure continuous compliance monitoring

---
# Service Account for Backup Operations
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backup-service-account
  namespace: disaster-recovery
  labels:
    compliance: "pci-dss,gdpr,soc2"
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: backup-operator
  labels:
    compliance: "pci-dss,gdpr,soc2"
rules:
- apiGroups: [""]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["velero.io"]
  resources: ["*"]
  verbs: ["*"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: backup-operator-binding
  labels:
    compliance: "pci-dss,gdpr,soc2"
subjects:
- kind: ServiceAccount
  name: backup-service-account
  namespace: disaster-recovery
roleRef:
  kind: ClusterRole
  name: backup-operator
  apiGroup: rbac.authorization.k8s.io

---
# Service Account for DR Testing
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dr-test-service-account
  namespace: disaster-recovery
  labels:
    compliance: "pci-dss,gdpr,soc2"
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dr-test-operator
  labels:
    compliance: "pci-dss,gdpr,soc2"
rules:
- apiGroups: [""]
  resources: ["namespaces", "pods", "services", "secrets", "configmaps"]
  verbs: ["*"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "daemonsets"]
  verbs: ["*"]
- apiGroups: ["velero.io"]
  resources: ["backups", "restores"]
  verbs: ["*"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dr-test-operator-binding
  labels:
    compliance: "pci-dss,gdpr,soc2"
subjects:
- kind: ServiceAccount
  name: dr-test-service-account
  namespace: disaster-recovery
roleRef:
  kind: ClusterRole
  name: dr-test-operator
  apiGroup: rbac.authorization.k8s.io

