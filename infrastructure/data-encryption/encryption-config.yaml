# Data Encryption Infrastructure for Financial Standards Compliance
# This configuration implements comprehensive encryption at rest and in transit

apiVersion: v1
kind: Namespace
metadata:
  name: encryption
  labels:
    name: encryption
    compliance: "pci-dss,gdpr,soc2"
    security-level: "maximum"

---
# Vault for Secrets Management and Encryption
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vault
  namespace: encryption
  labels:
    app: vault
    component: secrets-management
    compliance: "pci-dss,gdpr,soc2"
spec:
  serviceName: vault
  replicas: 3
  selector:
    matchLabels:
      app: vault
      component: secrets-management
  template:
    metadata:
      labels:
        app: vault
        component: secrets-management
        compliance: "pci-dss,gdpr,soc2"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8200"
        fluxora.com/encryption-service: "true"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 100
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      initContainers:
      - name: vault-init
        image: hashicorp/vault:1.15
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          # Create vault configuration directory
          mkdir -p /vault/config
          mkdir -p /vault/data
          mkdir -p /vault/logs
          
          # Generate vault configuration
          cat > /vault/config/vault.hcl << EOF
          # Vault Configuration for Financial Compliance
          
          # Storage Backend - Raft for HA
          storage "raft" {
            path = "/vault/data"
            node_id = "${HOSTNAME}"
            
            retry_join {
              leader_api_addr = "https://vault-0.vault.encryption.svc.cluster.local:8200"
            }
            retry_join {
              leader_api_addr = "https://vault-1.vault.encryption.svc.cluster.local:8200"
            }
            retry_join {
              leader_api_addr = "https://vault-2.vault.encryption.svc.cluster.local:8200"
            }
          }
          
          # Listener Configuration
          listener "tcp" {
            address = "0.0.0.0:8200"
            tls_cert_file = "/vault/certs/vault.crt"
            tls_key_file = "/vault/certs/vault.key"
            tls_client_ca_file = "/vault/certs/ca.crt"
            tls_require_and_verify_client_cert = true
            tls_min_version = "tls12"
            tls_cipher_suites = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
          }
          
          # Cluster Configuration
          cluster_addr = "https://${HOSTNAME}.vault.encryption.svc.cluster.local:8201"
          api_addr = "https://${HOSTNAME}.vault.encryption.svc.cluster.local:8200"
          
          # Seal Configuration - AWS KMS Auto-unseal
          seal "awskms" {
            region = "us-east-1"
            kms_key_id = "arn:aws:kms:us-east-1:ACCOUNT:key/VAULT-UNSEAL-KEY-ID"
            endpoint = "https://kms.us-east-1.amazonaws.com"
          }
          
          # UI Configuration
          ui = true
          
          # Logging
          log_level = "INFO"
          log_format = "json"
          log_file = "/vault/logs/vault.log"
          log_rotate_duration = "24h"
          log_rotate_max_files = 30
          
          # Performance and Security
          disable_mlock = false
          disable_cache = false
          disable_printable_check = false
          
          # Telemetry
          telemetry {
            prometheus_retention_time = "30s"
            disable_hostname = true
          }
          
          # Enterprise Features (if licensed)
          # license_path = "/vault/license/vault.hclic"
          EOF
          
          # Set proper permissions
          chown -R vault:vault /vault
          chmod 750 /vault/data
          chmod 640 /vault/config/vault.hcl
        
        volumeMounts:
        - name: vault-data
          mountPath: /vault/data
        - name: vault-config
          mountPath: /vault/config
        - name: vault-logs
          mountPath: /vault/logs
        - name: vault-certs
          mountPath: /vault/certs
          readOnly: true
        
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          allowPrivilegeEscalation: true
      
      containers:
      - name: vault
        image: hashicorp/vault:1.15
        ports:
        - containerPort: 8200
          name: vault-port
          protocol: TCP
        - containerPort: 8201
          name: cluster-port
          protocol: TCP
        
        command:
        - vault
        - server
        - -config=/vault/config/vault.hcl
        
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: VAULT_ADDR
          value: "https://127.0.0.1:8200"
        - name: VAULT_API_ADDR
          value: "https://$(HOSTNAME).vault.encryption.svc.cluster.local:8200"
        - name: VAULT_CLUSTER_ADDR
          value: "https://$(HOSTNAME).vault.encryption.svc.cluster.local:8201"
        - name: VAULT_RAFT_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: VAULT_LOCAL_CONFIG
          value: |
            {
              "backend": {"file": {"path": "/vault/data"}},
              "listener": {"tcp": {"address": "0.0.0.0:8200", "tls_disable": false}},
              "default_lease_ttl": "168h",
              "max_lease_ttl": "720h"
            }
        
        volumeMounts:
        - name: vault-data
          mountPath: /vault/data
        - name: vault-config
          mountPath: /vault/config
          readOnly: true
        - name: vault-logs
          mountPath: /vault/logs
        - name: vault-certs
          mountPath: /vault/certs
          readOnly: true
        
        resources:
          limits:
            cpu: 2000m
            memory: 4Gi
          requests:
            cpu: 1000m
            memory: 2Gi
        
        livenessProbe:
          httpGet:
            path: /v1/sys/health?standbyok=true
            port: 8200
            scheme: HTTPS
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204
            port: 8200
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 100
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
            add:
            - IPC_LOCK  # Required for mlock
      
      # Vault Agent for Secrets Injection
      - name: vault-agent
        image: hashicorp/vault:1.15
        command:
        - vault
        - agent
        - -config=/vault/agent/config.hcl
        
        env:
        - name: VAULT_ADDR
          value: "https://127.0.0.1:8200"
        
        volumeMounts:
        - name: vault-agent-config
          mountPath: /vault/agent
          readOnly: true
        - name: vault-certs
          mountPath: /vault/certs
          readOnly: true
        - name: vault-secrets
          mountPath: /vault/secrets
        
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 512Mi
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 100
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: vault-config
        emptyDir:
          sizeLimit: 100Mi
      - name: vault-logs
        emptyDir:
          sizeLimit: 1Gi
      - name: vault-certs
        secret:
          secretName: vault-tls-certs
          defaultMode: 0400
      - name: vault-agent-config
        configMap:
          name: vault-agent-config
      - name: vault-secrets
        emptyDir:
          sizeLimit: 100Mi
      
      serviceAccountName: vault-service-account
      
  volumeClaimTemplates:
  - metadata:
      name: vault-data
      labels:
        app: vault
        compliance: "pci-dss,gdpr,soc2"
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "gp3-encrypted"
      resources:
        requests:
          storage: 50Gi

---
# Vault Service
apiVersion: v1
kind: Service
metadata:
  name: vault
  namespace: encryption
  labels:
    app: vault
    compliance: "pci-dss,gdpr,soc2"
spec:
  clusterIP: None
  selector:
    app: vault
  ports:
  - port: 8200
    name: vault-port
    protocol: TCP
  - port: 8201
    name: cluster-port
    protocol: TCP

---
# Vault Agent Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-agent-config
  namespace: encryption
  labels:
    app: vault
    compliance: "pci-dss,gdpr,soc2"
data:
  config.hcl: |
    # Vault Agent Configuration
    
    vault {
      address = "https://127.0.0.1:8200"
      ca_cert = "/vault/certs/ca.crt"
      client_cert = "/vault/certs/vault.crt"
      client_key = "/vault/certs/vault.key"
    }
    
    auto_auth {
      method "kubernetes" {
        mount_path = "auth/kubernetes"
        config = {
          role = "vault-agent"
          token_path = "/var/run/secrets/kubernetes.io/serviceaccount/token"
        }
      }
      
      sink "file" {
        config = {
          path = "/vault/secrets/token"
        }
      }
    }
    
    cache {
      use_auto_auth_token = true
    }
    
    listener "tcp" {
      address = "127.0.0.1:8100"
      tls_disable = true
    }
    
    template {
      source = "/vault/templates/database.tpl"
      destination = "/vault/secrets/database-config"
      perms = 0640
    }
    
    template {
      source = "/vault/templates/api-keys.tpl"
      destination = "/vault/secrets/api-keys"
      perms = 0640
    }

---
# External Secrets Operator for Kubernetes Integration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-secrets-operator
  namespace: encryption
  labels:
    app: external-secrets-operator
    compliance: "pci-dss,gdpr,soc2"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: external-secrets-operator
  template:
    metadata:
      labels:
        app: external-secrets-operator
        compliance: "pci-dss,gdpr,soc2"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      
      containers:
      - name: external-secrets-operator
        image: ghcr.io/external-secrets/external-secrets:v0.9.0
        ports:
        - containerPort: 8080
          name: metrics
        - containerPort: 9443
          name: webhook
        
        args:
        - --secure-metrics=true
        - --metrics-addr=:8080
        - --webhook-addr=:9443
        - --webhook-cert-dir=/tmp/k8s-webhook-server/serving-certs
        - --enable-leader-election
        - --leader-election-namespace=encryption
        - --concurrent-reconciles=10
        
        env:
        - name: EXTERNAL_SECRETS_OPERATOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        volumeMounts:
        - name: webhook-certs
          mountPath: /tmp/k8s-webhook-server/serving-certs
          readOnly: true
        
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 512Mi
        
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: webhook-certs
        secret:
          secretName: external-secrets-webhook-certs
      
      serviceAccountName: external-secrets-operator

---
# SecretStore for Vault Integration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-secret-store
  namespace: fluxora
  labels:
    compliance: "pci-dss,gdpr,soc2"
spec:
  provider:
    vault:
      server: "https://vault.encryption.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      caBundle: "LS0tLS1CRUdJTi..." # Base64 encoded CA certificate
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "fluxora-app"
          serviceAccountRef:
            name: "fluxora-vault-auth"

---
# ExternalSecret for Database Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: fluxora
  labels:
    compliance: "pci-dss,gdpr,soc2"
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: mysql-app-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        username: "{{ .username }}"
        password: "{{ .password }}"
        host: "{{ .host }}"
        port: "{{ .port }}"
        database: "{{ .database }}"
        connection-string: "mysql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .database }}?ssl=true"
  data:
  - secretKey: username
    remoteRef:
      key: database/mysql
      property: username
  - secretKey: password
    remoteRef:
      key: database/mysql
      property: password
  - secretKey: host
    remoteRef:
      key: database/mysql
      property: host
  - secretKey: port
    remoteRef:
      key: database/mysql
      property: port
  - secretKey: database
    remoteRef:
      key: database/mysql
      property: database

---
# Encryption Key Management
apiVersion: v1
kind: ConfigMap
metadata:
  name: encryption-policies
  namespace: encryption
  labels:
    compliance: "pci-dss,gdpr,soc2"
data:
  encryption-policy.yaml: |
    # Encryption Policies for Financial Compliance
    
    # Key Management Policies
    key_management:
      - name: "key_rotation"
        description: "All encryption keys must be rotated annually"
        frequency: "annual"
        enforcement: "automatic"
        notification: "security-team@fluxora.com"
      
      - name: "key_escrow"
        description: "Key escrow for regulatory compliance"
        enabled: true
        escrow_location: "secure_facility"
        access_control: "dual_control"
      
      - name: "key_destruction"
        description: "Secure key destruction procedures"
        method: "cryptographic_erasure"
        verification: "required"
        audit_trail: "mandatory"
    
    # Encryption Standards
    encryption_standards:
      - algorithm: "AES-256-GCM"
        use_case: "data_at_rest"
        compliance: ["pci-dss", "gdpr", "soc2"]
        approved: true
      
      - algorithm: "RSA-4096"
        use_case: "key_exchange"
        compliance: ["pci-dss", "gdpr", "soc2"]
        approved: true
      
      - algorithm: "ECDSA-P384"
        use_case: "digital_signatures"
        compliance: ["pci-dss", "gdpr", "soc2"]
        approved: true
      
      - algorithm: "ChaCha20-Poly1305"
        use_case: "data_in_transit"
        compliance: ["pci-dss", "gdpr", "soc2"]
        approved: true
    
    # Data Classification Encryption Requirements
    data_classification:
      - classification: "restricted"
        encryption_required: true
        key_strength: "256-bit"
        key_rotation: "quarterly"
        access_logging: true
      
      - classification: "confidential"
        encryption_required: true
        key_strength: "256-bit"
        key_rotation: "semi-annual"
        access_logging: true
      
      - classification: "internal"
        encryption_required: true
        key_strength: "128-bit"
        key_rotation: "annual"
        access_logging: false
    
    # Compliance Requirements
    compliance_requirements:
      pci_dss:
        - requirement: "3.4"
          description: "Render PAN unreadable anywhere it is stored"
          implementation: "AES-256 encryption with secure key management"
        
        - requirement: "3.5"
          description: "Document and implement procedures to protect keys"
          implementation: "Vault-based key management with dual control"
        
        - requirement: "3.6"
          description: "Fully document and implement all key-management processes"
          implementation: "Automated key lifecycle management"
      
      gdpr:
        - article: "32"
          description: "Security of processing"
          implementation: "Encryption of personal data at rest and in transit"
        
        - article: "25"
          description: "Data protection by design and by default"
          implementation: "Default encryption for all data stores"
      
      soc2:
        - criteria: "CC6.1"
          description: "Logical and physical access controls"
          implementation: "Encrypted storage with access controls"
        
        - criteria: "CC6.7"
          description: "Data transmission controls"
          implementation: "TLS 1.3 for all data transmission"

---
# Encryption Monitoring and Alerting
apiVersion: v1
kind: ConfigMap
metadata:
  name: encryption-monitoring
  namespace: monitoring
  labels:
    component: encryption-monitoring
    compliance: "pci-dss,gdpr,soc2"
data:
  encryption-rules.yaml: |
    groups:
    - name: encryption.rules
      rules:
      # Vault Health Monitoring
      - alert: VaultDown
        expr: up{job="vault"} == 0
        for: 1m
        labels:
          severity: critical
          compliance: "pci-dss,gdpr,soc2"
          category: encryption
        annotations:
          summary: "Vault is down"
          description: "Vault instance {{ $labels.instance }} is down"
          remediation: "Check Vault cluster status and restart if necessary"
      
      - alert: VaultSealed
        expr: vault_core_unsealed == 0
        for: 0m
        labels:
          severity: critical
          compliance: "pci-dss,gdpr,soc2"
          category: encryption
        annotations:
          summary: "Vault is sealed"
          description: "Vault instance {{ $labels.instance }} is sealed"
          remediation: "Unseal Vault using unseal keys"
      
      # Key Rotation Monitoring
      - alert: EncryptionKeyRotationOverdue
        expr: (time() - vault_secret_kv_secret_metadata_created_time) > 31536000  # 1 year
        for: 0m
        labels:
          severity: warning
          compliance: "pci-dss,gdpr,soc2"
          category: key_management
        annotations:
          summary: "Encryption key rotation overdue"
          description: "Encryption key {{ $labels.secret_path }} has not been rotated in over 1 year"
          remediation: "Rotate encryption key according to policy"
      
      # Unencrypted Data Detection
      - alert: UnencryptedSecretDetected
        expr: kube_secret_info{type!~".*tls.*"} unless on(secret) vault_secret_kv_secret_metadata_created_time
        for: 0m
        labels:
          severity: critical
          compliance: "pci-dss,gdpr,soc2"
          category: data_protection
        annotations:
          summary: "Unencrypted secret detected"
          description: "Secret {{ $labels.secret }} in namespace {{ $labels.namespace }} is not managed by Vault"
          remediation: "Migrate secret to Vault-managed encryption"
      
      # External Secrets Operator Health
      - alert: ExternalSecretsOperatorDown
        expr: up{job="external-secrets-operator"} == 0
        for: 2m
        labels:
          severity: critical
          compliance: "pci-dss,gdpr,soc2"
          category: secrets_management
        annotations:
          summary: "External Secrets Operator is down"
          description: "External Secrets Operator is not running"
          remediation: "Check and restart External Secrets Operator"

---
# Service Accounts for Encryption Services
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-service-account
  namespace: encryption
  labels:
    app: vault
    compliance: "pci-dss,gdpr,soc2"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-operator
  namespace: encryption
  labels:
    app: external-secrets-operator
    compliance: "pci-dss,gdpr,soc2"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluxora-vault-auth
  namespace: fluxora
  labels:
    app: fluxora
    compliance: "pci-dss,gdpr,soc2"

---
# RBAC for Vault
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vault-role
  labels:
    app: vault
    compliance: "pci-dss,gdpr,soc2"
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-binding
  labels:
    app: vault
    compliance: "pci-dss,gdpr,soc2"
subjects:
- kind: ServiceAccount
  name: vault-service-account
  namespace: encryption
roleRef:
  kind: ClusterRole
  name: vault-role
  apiGroup: rbac.authorization.k8s.io

